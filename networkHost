from twisted.internet.protocol import ClientFactory
from twisted.internet.protocol import Protocol
from twisted.internet import reactor
from twisted.internet import task
import time
from twisted.internet import defer
import sys, pygame, os
import random
from pygame.locals import *
import math

class Target(pygame.sprite.Sprite):
	def __init__(self, gs, x, y):
		pygame.sprite.Sprite.__init__(self)
		self.gs = gs
		self.image = pygame.transform.scale(pygame.image.load("like_button.png"), (50, 50))
		self.rect = self.image.get_rect()
		self.rect.topleft = x, y
		self.gs.CC.transport.write("coor;{};{}".format(x,y))
		
	
	def tick(self):
		gs.screen.blit(self.image, self.rect)
		
class Fade(pygame.sprite.Sprite):
	def __init__(self, gs, center):
		pygame.sprite.Sprite.__init__(self)
		self.gs = gs
		size = 50, 50
		self.image = pygame.transform.scale(pygame.image.load("liked_button.png"), size)
		self.rect = self.image.get_rect()
		self.rect.center = center
		self.count = 10
		
	def tick(self):
		self.image.set_alpha(self.count)
		self.count -= 1
		if(self.count <= 0):
			self.kill()
		gs.screen.blit(self.image, self.rect)
		
		
class Smoke(pygame.sprite.Sprite):
	def __init__(self, gs, center):
		pygame.sprite.Sprite.__init__(self)
		self.gs = gs
		self.images = []
		size = 75, 75
		self.image = pygame.transform.scale(pygame.image.load("smoke_plume_0001.png"), size)
		self.images.append(pygame.transform.scale(pygame.image.load("smoke_plume_0002.png"), size))
		self.images.append(pygame.transform.scale(pygame.image.load("smoke_plume_0003.png"), size))
		self.images.append(pygame.transform.scale(pygame.image.load("smoke_plume_0004.png"), size))
		self.images.append(pygame.transform.scale(pygame.image.load("smoke_plume_0005.png"), size))
		self.images.append(pygame.transform.scale(pygame.image.load("smoke_plume_0006.png"), size))
		self.images.append(pygame.transform.scale(pygame.image.load("smoke_plume_0007.png"), size))
		self.images.append(pygame.transform.scale(pygame.image.load("smoke_plume_0008.png"), size))
		self.images.append(pygame.transform.scale(pygame.image.load("smoke_plume_0009.png"), size))
		self.images.append(pygame.transform.scale(pygame.image.load("smoke_plume_0010.png"), size))
		self.rect = self.image.get_rect()
		self.rect.center = center
		self.count = 0
		
	def tick(self):
		if(self.count > 7):
			self.kill()
		self.image = self.images[self.count]
		self.gs.screen.blit(self.image, self.rect)
		self.count += 1

class ClientConnection(Protocol):
	
	def __init__(self, gs):
		self.connected = 0
		self.gs = gs
		self.gs.injectCC(self)

	def connectionMade(self):
		print "client connection made"
		self.gs.connPic()
		self.transport.write("host says hello")
		
	def dataReceived(self, data):
		if "kill" in data:
			self.gs.kill1()

class ClientConnectionFactory(ClientFactory):
	def __init__(self, gs):
		self.myconn = ClientConnection(gs)
	
	def buildProtocol(self, addr):
		return self.myconn

		
class GameSpace:
	def __init__(self):
		pygame.init()
		self.size = self.width, self.height = 800, 600
		self.black = 0,0,0
		self.screen = pygame.display.set_mode(self.size)
		self.image = pygame.image.load("./Menu.png")
		self.rect = self.image.get_rect()
		self.state = "Menu"
		self.connected = 0
		self.clickCount = 0
		self.fb = pygame.sprite.Group()
		self.smokes = pygame.sprite.Group()
		self.screen.fill(self.black)
		self.myfont = pygame.font.Font(None, 35)
		self.ms = random.randint(30, 120)/100
		self.placed = 0
		self.enemyCount = 0
		
		self.screen.blit(self.image, self.rect)
		pygame.display.flip()
		
	
	def injectCC(self, CC):
		self.CC = CC
	
	def connPic(self):
		if(self.state == "Wait"):
			self.image = pygame.image.load("./ClientConnected.png")
			self.rect = self.image.get_rect()
			self.state = "Connected"
		self.connected = 1
	
	def gameTime(self):
		self.CC.transport.write("Ready")
		self.image = pygame.image.load("./HostReady.png")
		self.rect = self.image.get_rect()
		self.state = "Ready"
		self.start = time.time()
	
	def clientWait(self):
		self.state = "Wait"
		if(self.connected != 1):
			self.image = pygame.image.load("./Waiting1.png")
			self.rect = self.image.get_rect()
		else:
			self.connPic()
	
	def kill1(self):
		self.enemyCount += 1
		for targ in self.fb:
			self.smokes.add(Smoke(self, targ.rect.center))
			targ.kill()
			self.placed = 0
			self.start = time.time()
			self.ms = random.randint(30, 120)/100

	
	def gameMode1(self):
		if(self.ms < time.time() - self.start and self.placed == 0):
			self.fb.add(Target(self, random.randint(0, 750), random.randint(0, 550)))
			self.placed = 1
		for event in pygame.event.get():
			if event.type == pygame.MOUSEBUTTONDOWN:
				for targ in self.fb:
					if targ.rect.collidepoint(event.pos):
						self.clickCount += 1
						self.smokes.add(Fade(self, targ.rect.center))
						targ.kill()
						self.CC.transport.write("kill")
						#print ("Total clicked: ", self.clickCount)
						self.placed = 0
						self.start = time.time()
						self.ms = random.randint(30, 120)/100
			# if event.type == pygame.KEYDOWN:
				# if chr(event.key) == 'q':
					# print "fuck"
		for targ in self.fb:
			targ.tick()
		for smoke in self.smokes:
			smoke.tick()
		label = self.myfont.render("Hits: {}     Enemy Hits: {}".format(self.clickCount, self.enemyCount), 1, (255, 255, 255))
		self.screen.blit(label, (250, 100))
		pygame.display.flip()
		self.screen.fill(self.black)	
				#send ms
		return
	
	def main(self):
		if self.state == "Ready":
			self.gameMode1()
			return
			
		self.screen.blit(self.image, self.rect)
		
		
		for event in pygame.event.get():
			if event.type == KEYDOWN:
				print "the s word"
			if event.type == MOUSEBUTTONDOWN:
				if self.state == "Menu":
					self.clientWait()
				if self.state == "Connected":
					self.gameTime()

		pygame.display.flip()
		
			
		
if __name__=='__main__':

	gs = GameSpace()
	l = task.LoopingCall(gs.main)
	l.start(0.01666)
	ccf = ClientConnectionFactory(gs)
	reactor.listenTCP(40035, ccf) # client port
	reactor.run()